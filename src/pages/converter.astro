---
import Input from "@/components/starwind/input";
import Button from "@/components/starwind/button";
import Layout from "@/layouts/Layout.astro";
const user = await Astro.locals.currentUser();

let enoughCredits = 10;
/*if (user) {
    const userCredits = await getUserInfo(user);
    enoughCredits = userCredits.credits;
}*/
const figmaExample =
  "https://www.figma.com/design/LdilSTSeMPzfJ4F2kj1ErR/Lush-Garden---Florist-Landing-Page-Design--Community-?node-id=0-1&p=f&t=h7KBNr99U1MwC5JJ-0";
---

<Layout>
  <section class="flex flex-col items-center justify-center min-h-screen px-6 text-center bg-gradient-to-b from-white to-orange-50">
    <h1 class="text-5xl md:text-6xl font-extrabold mb-4 text-gray-900 drop-shadow-md">
      Preview Your Figma File
    </h1>
    <p class="text-gray-700 mb-8 max-w-xl text-center">
      Paste a Figma file URL below to see a live preview.
    </p>

    <form id="figmaForm" class="flex flex-col sm:flex-row gap-4 items-center justify-center w-full max-w-2xl mb-8">
      <Input
        type="url"
        name="figmaURL"
        id="figmaURL"
        placeholder="Paste your Figma file URL"
        value={figmaExample}
        required
        class="flex-1 px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-400"
      />
      <Button
        type="submit"
        id="previewButton"
        class="bg-orange-500 hover:bg-orange-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-md transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
      >
        Preview
      </Button>
    </form>

    <!-- Progress indicator -->
    <div id="progressIndicator" class="hidden w-full max-w-2xl mb-6">
      <div class="bg-gray-200 rounded-full h-2 overflow-hidden">
        <div id="progressBar" class="bg-orange-500 h-full transition-all duration-500 ease-out" style="width: 0%"></div>
      </div>
      <div class="flex justify-between mt-2 text-sm text-gray-600">
        <span id="step1" class="font-medium">1. Fetching Figma data...</span>
      </div>
    </div>

    <div id="previewContainer" class="w-full text-left"></div>
  </section>

  <!-- <script is:inline>
    const form = document.getElementById("figmaForm");
    const previewContainer = document.getElementById("previewContainer");
    const previewButton = document.getElementById("previewButton");
    const progressIndicator = document.getElementById("progressIndicator");
    const progressBar = document.getElementById("progressBar");
    const step1 = document.getElementById("step1");
    const step2 = document.getElementById("step2");
    const step3 = document.getElementById("step3");

    function updateProgress(step, percentage) {
      progressBar.style.width = `${percentage}%`;
      
      // Reset all steps
      [step1, step2, step3].forEach(s => {
        s.classList.remove('text-orange-600', 'font-bold');
        s.classList.add('opacity-50');
      });

      // Highlight current step
      if (step === 1) {
        step1.classList.remove('opacity-50');
        step1.classList.add('text-orange-600', 'font-bold');
      } else if (step === 2) {
        step1.classList.remove('opacity-50');
        step2.classList.remove('opacity-50');
        step2.classList.add('text-orange-600', 'font-bold');
      } else if (step === 3) {
        [step1, step2, step3].forEach(s => s.classList.remove('opacity-50'));
        step3.classList.add('text-green-600', 'font-bold');
      }
    }

    function showError(message) {
      previewContainer.innerHTML = `<div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
        <p class="text-red-700 font-medium">‚ùå Error</p>
        <p class="text-red-600">${message}</p>
      </div>`;
    }

    function showSuccess(message) {
      const successDiv = document.createElement('div');
      successDiv.className = 'bg-green-50 border border-green-200 rounded-lg p-4 mb-6';
      successDiv.innerHTML = `
        <p class="text-green-700 font-medium">‚úÖ Success</p>
        <p class="text-green-600">${message}</p>
      `;
      previewContainer.insertBefore(successDiv, previewContainer.firstChild);
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const url = document.getElementById("figmaURL").value.trim();

      if (!url) {
        showError('Please enter a Figma file URL');
        return;
      }

      // Reset UI
      previewContainer.innerHTML = "";
      progressIndicator.classList.remove('hidden');
      previewButton.disabled = true;
      previewButton.textContent = 'Processing...';

      try {
        // Step 1: Convert Figma file
        updateProgress(1, 25);
        const formData = new FormData();
        formData.append("figmaURL", url);

        const convertRes = await fetch("/api/convert", {
          method: "POST",
          body: formData,
        });

        const convertData = await convertRes.json();

        if (!convertRes.ok || !convertData.success) {
          console.error("Convert API Error:", convertData);
          showError(convertData.message || "Failed to fetch Figma data");
          return;
        }

        updateProgress(1, 50);

        // Step 2: Generate components
        updateProgress(2, 60);
        const generateRes = await fetch("/api/generate", {
          method: "POST",
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            processedFrames: convertData.processedFrames,
            figmaURL: convertData.figmaURL,
            fileKey: convertData.fileKey
          }),
        });

        const generateData = await generateRes.json();

        if (!generateRes.ok || !generateData.success) {
          console.error("Generate API Error:", generateData);
          showError(generateData.message || "Failed to generate components");
          return;
        }

        updateProgress(2, 90);

        // Step 3: Display results
        updateProgress(3, 100);

        previewContainer.innerHTML = `
          <div class="mb-6 p-6 bg-white rounded-lg shadow-lg">
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-orange-600">${generateData.generationStats.totalFrames}</div>
                <div class="text-sm text-gray-600">Total Frames</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600">${generateData.totalComponents}</div>
                <div class="text-sm text-gray-600">Components Generated</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600">${generateData.generationStats.skippedFrames}</div>
                <div class="text-sm text-gray-600">Frames Skipped</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-purple-600">${new Set(generateData.sections.map(s => s.componentType)).size}</div>
                <div class="text-sm text-gray-600">Component Types</div>
              </div>
            </div>
          </div>

          <div class="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <h3 class="font-bold text-lg mb-2 text-blue-900">üìã Complete index.astro File</h3>
            <p class="text-blue-700 mb-3">Copy this complete Astro page that imports all your generated components:</p>
            <div class="relative">
              <pre id="indexCode" class="bg-white p-4 rounded border overflow-x-auto text-sm"><code>${generateData.indexFile.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</code></pre>
              <button id="copyIndexButton" class="absolute top-2 right-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded text-sm transition-colors duration-200">
                Copy All
              </button>
            </div>
          </div>

          <div class="mb-6">
            <iframe src="${convertData.embedUrl}" class="w-full h-96 border border-gray-200 rounded-lg shadow" allowfullscreen></iframe>
          </div>

          <h3 class="text-2xl font-bold mb-4 text-gray-900">Generated Components</h3>
          <div id="sectionsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-6"></div>
        `;

        // Add copy functionality for index file
        document.getElementById("copyIndexButton").addEventListener("click", () => {
          const button = document.getElementById("copyIndexButton");
          navigator.clipboard.writeText(generateData.indexFile);
          button.textContent = "Copied!";
          button.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          button.classList.add('bg-green-500');
          setTimeout(() => {
            button.textContent = "Copy All";
            button.classList.remove('bg-green-500');
            button.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }, 2000);
        });

        // Render individual components
        const container = document.getElementById("sectionsContainer");
        generateData.sections.forEach((section) => {
          const el = document.createElement("div");
          const codeEscaped = section.code.replace(/</g, "&lt;").replace(/>/g, "&gt;");

          el.innerHTML = `
            <div class="p-6 border border-gray-200 rounded-lg shadow-sm bg-white hover:shadow-md transition-shadow duration-200">
              <div class="flex items-center justify-between mb-4">
                <div>
                  <h4 class="text-lg font-semibold text-gray-900">${section.componentName}.astro</h4>
                  <span class="text-sm px-2 py-1 bg-${getColorForType(section.componentType)}-100 text-${getColorForType(section.componentType)}-800 rounded-full">
                    ${section.componentType}
                  </span>
                </div>
                <div class="text-sm text-gray-500">
                  ${section.texts.length} text${section.texts.length !== 1 ? 's' : ''} found
                </div>
              </div>
              
              ${section.texts.length > 0 ? `
                <div class="mb-4">
                  <p class="text-sm font-medium text-gray-700 mb-2">Extracted Text:</p>
                  <div class="text-xs text-gray-600 bg-gray-50 p-2 rounded max-h-20 overflow-y-auto">
                    ${section.texts.map(t => `<span class="inline-block bg-white px-2 py-1 rounded mr-1 mb-1 border">${t}</span>`).join('')}
                  </div>
                </div>
              ` : ''}
              
              <div class="mb-4">
                <p class="text-sm font-medium text-gray-700 mb-2">Generated Code:</p>
                <pre class="bg-gray-50 p-3 rounded text-xs overflow-x-auto max-h-64 overflow-y-auto border"><code>${codeEscaped}</code></pre>
              </div>
              
              <button class="copyButton w-full bg-orange-500 hover:bg-orange-600 text-white py-2 px-4 rounded transition-colors duration-200 font-medium">
                Copy Component Code
              </button>
            </div>
          `;

          container.appendChild(el);
        });

        // Add copy functionality for individual components
        container.querySelectorAll(".copyButton").forEach((btn) => {
          btn.addEventListener("click", () => {
            const codeElement = btn.parentElement.querySelector('pre code');
            if (!codeElement) return;
            
            const code = codeElement.textContent.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            navigator.clipboard.writeText(code);
            
            const originalText = btn.textContent;
            btn.textContent = "Copied!";
            btn.classList.remove('bg-orange-500', 'hover:bg-orange-600');
            btn.classList.add('bg-green-500');
            
            setTimeout(() => {
              btn.textContent = originalText;
              btn.classList.remove('bg-green-500');
              btn.classList.add('bg-orange-500', 'hover:bg-orange-600');
            }, 1500);
          });
        });

        showSuccess(`Successfully generated ${generateData.totalComponents} components from your Figma design!`);

      } catch (err) {
        console.error("Processing Error:", err);
        
        // Check if it's a network/CORS error
        if (err.message.includes('Failed to fetch') || err.message.includes('NetworkError')) {
          showError(
            'Network connection failed. This might be a CORS issue or the server is not responding.', 
            `Error: ${err.message}\n\nTroubleshooting:\n1. Check if the API server is running\n2. Verify CORS configuration\n3. Check browser console for more details`
          );
        } else {
          showError(`Processing failed: ${err.message}`, err.stack);
        }
      } finally {
        // Reset UI
        progressIndicator.classList.add('hidden');
        previewButton.disabled = false;
        previewButton.textContent = 'Preview & Generate';
        progressBar.style.width = '0%';
      }
    });

    function getColorForType(type) {
      const colors = {
        'Navbar': 'blue',
        'Hero': 'purple',
        'Footer': 'gray',
        'AboutUs': 'green',
        'Newsletter': 'yellow',
        'Blog': 'indigo',
        'Testimonial': 'pink',
        'Gallery': 'cyan',
        'CTA': 'orange',
        'Card': 'slate'
      };
      return colors[type] || 'gray';
    }
  </script>-->
  <script is:inline>
  const form = document.getElementById("figmaForm");
  const previewContainer = document.getElementById("previewContainer");
  const previewButton = document.getElementById("previewButton");
  const progressIndicator = document.getElementById("progressIndicator");
  const progressBar = document.getElementById("progressBar");
  const step1 = document.getElementById("step1");

  function updateProgress(percentage) {
    progressBar.style.width = `${percentage}%`;
  }

  function showError(message) {
    previewContainer.innerHTML = `<div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
      <p class="text-red-700 font-medium">‚ùå Error</p>
      <p class="text-red-600">${message}</p>
    </div>`;
  }

  function showSuccess(message) {
    const successDiv = document.createElement('div');
    successDiv.className = 'bg-green-50 border border-green-200 rounded-lg p-4 mb-6';
    successDiv.innerHTML = `
      <p class="text-green-700 font-medium">‚úÖ Success</p>
      <p class="text-green-600">${message}</p>
    `;
    previewContainer.insertBefore(successDiv, previewContainer.firstChild);
  }

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const url = document.getElementById("figmaURL").value.trim();

    if (!url) {
      showError('Please enter a Figma file URL');
      return;
    }

    // Reset UI
    previewContainer.innerHTML = "";
    progressIndicator.classList.remove('hidden');
    previewButton.disabled = true;
    previewButton.textContent = 'Fetching...';
    updateProgress(10);

    try {
      const formData = new FormData();
      formData.append("figmaURL", url);

      const res = await fetch("/api/getFile", {
        method: "POST",
        body: formData,
      });

      const data = await res.json();

      if (!res.ok || !data.success) {
        console.error("API Error:", data);
        showError(data.message || "Failed to fetch Figma file");
        return;
      }

      updateProgress(80);

      // Display some basic info
      const fileName = data.figmaData.name || "Unknown Figma File";
      const componentsCount = Object.keys(data.figmaData.components || {}).length;

      previewContainer.innerHTML = `
        <div class="mb-6 p-6 bg-white rounded-lg shadow-lg">
          <h3 class="font-bold text-lg mb-2 text-gray-900">Figma File: ${fileName}</h3>
          <p class="text-gray-700 mb-2">File Key: ${data.fileKey}</p>
          <p class="text-gray-700 mb-2">Components Found: ${componentsCount}</p>
        </div>
      `;

      showSuccess(`Figma file fetched successfully!`);
      updateProgress(100);

    } catch (err) {
      console.error("Fetch Error:", err);
      showError(`Failed to fetch Figma file: ${err.message}`);
    } finally {
      progressIndicator.classList.add('hidden');
      previewButton.disabled = false;
      previewButton.textContent = 'Preview & Generate';
      updateProgress(0);
    }
  });
</script>

</Layout>